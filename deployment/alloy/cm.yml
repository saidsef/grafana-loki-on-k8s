---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy
  labels:
    app.kubernetes.io/name: alloy
data:
  config.alloy: |-
    logging {
    	level  = "warn"
    	format = "json"
    }

    discovery.kubelet "pods" {
      url  = string.format("https://%s:10250", sys.env("NODE_IP"))
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      // this is a local node, so we can skip TLS verification
      tls_config {
        insecure_skip_verify = true
      }
    }
    
    discovery.kubernetes "pods" {
    	role = "pod"
      selectors {
        field = "spec.nodeName=" + sys.env("HOSTNAME")
        role = "pod"
      }
    }

    discovery.relabel "pod_logs" {
      targets = discovery.kubelet.pods.targets
      rule {
        action = "labelmap"
        regex  = "__meta_kubernetes_pod_label_(.+)"
      }
    }

    discovery.relabel "all_targets_with_address" {
      targets = array.concat(discovery.kubernetes.pods.targets, discovery.kubernetes.nodes.targets, discovery.kubernetes.services.targets, discovery.kubernetes.ingresses.targets)
      rule {
        action = "drop"
        regex = "Succeeded|Failed"
        source_labels = ["__meta_kubernetes_pod_phase"]
      }
      rule {
        action = "replace"
        regex = "(.*)@(.*)"
        replacement = "ebpf/${1}/${2}"
        separator = "@"
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
        target_label = "service_name"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_name"]
        regex         = ".+"
        target_label  = "source"
        replacement   = "services"
        action        = "replace"
      }
      rule {
        source_labels = ["__meta_kubernetes_endpointslice_name"]
        regex         = ".+"
        target_label  = "source"
        replacement   = "endpointslices"
        action        = "replace"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        regex         = ".+"
        target_label  = "source"
        replacement   = "kubelet_pods"
        action        = "replace"
      }
      rule {
        source_labels = ["__meta_kubernetes_ingress_name"]
        regex         = ".+"
        target_label  = "source"
        replacement   = "ingresses"
        action        = "replace"
      }
      rule {
        source_labels = ["__address__"]
        regex        = ".+"
        action       = "keep"
      }
      rule {
        action = "labelmap"
        regex  = "__meta_kubernetes_pod_label_(.+)"
      }
      rule {
        action = "labelmap"
        regex  = "__meta_kubernetes_service_label_(.+)"
      }
      rule {
        action = "labelmap"
        regex  = "__meta_kubernetes_ingress_label_(.+)"
      }
      rule {
        action = "labelmap"
        regex  = "__meta_kubernetes_endpointslice_label_(.+)"
      }
      rule {
        action = "replace"
        source_labels = ["__meta_kubernetes_namespace"]
        target_label = "namespace"
      }
      rule {
        action = "replace"
        source_labels = ["__meta_kubernetes_pod_node_name"]
        target_label = "node"
      }
      rule {
        action = "labeldrop"
        regex  = "pod_template_hash|controller_revision_hash|checksum_.*|pod_uid|instance|job"
      }
    }

    discovery.kubernetes "nodes" {
    	role = "node"
    }

    discovery.kubernetes "services" {
    	role = "service"
    }

    discovery.kubernetes "ingresses" {
    	role = "ingress"
    }

    loki.write "loki" {
      endpoint {
        url = "http://loki:3100/loki/api/v1/push"
      }
    }

    loki.source.kubernetes "pods" {
      targets    = discovery.relabel.pod_logs.output
      forward_to = [loki.process.add_replay_label.receiver]
    }

    loki.process "add_replay_label" {
      stage.drop {
        older_than = "1h"
        drop_counter_reason = "line_too_old"
      }
      // stage.logfmt {}
      forward_to = [loki.write.loki.receiver]
    }

    loki.source.kubernetes_events "cluster" {
      forward_to = [loki.write.loki.receiver]
    }

    loki.source.syslog "local" {
      listener {
        address  = "0.0.0.0:51893"
        labels   = { component = "loki.source.syslog", protocol = "tcp" }
      }

      listener {
        address  = "0.0.0.0:51898"
        protocol = "udp"
        labels   = { component = "loki.source.syslog", protocol = "udp"}
      }

      forward_to = [loki.write.loki.receiver]
    }

    prometheus.remote_write "prometheus" {
       wal {
          max_keepalive_time = "10m"
          min_keepalive_time = "5m"
          truncate_frequency = "5m"
        }
        endpoint {
          url = "http://prometheus-server/api/v1/write"
        }
    }

    prometheus.remote_write "mimir" {
      wal {
          max_keepalive_time = "10m"
          min_keepalive_time = "5m"
          truncate_frequency = "5m"
      }
      endpoint {
        url = "http://mimir/api/v1/push"
      }
    }

    prometheus.scrape "default" {
      targets    = discovery.relabel.all_targets_with_address.output
      forward_to = [prometheus.remote_write.prometheus.receiver, prometheus.remote_write.mimir.receiver]
      extra_metrics = true
    }

    otelcol.exporter.otlp "tempo" {
      client {
        endpoint = "tempo:4317"
        tls {
          insecure             = true
          insecure_skip_verify = true
        }
      }
    }

    otelcol.processor.discovery "default" {
      targets = array.concat(discovery.kubelet.pods.targets, discovery.kubernetes.nodes.targets)

      output {
        traces = [otelcol.exporter.otlp.tempo.input]
      }
    }

    // OTelcol receiver for traces and metrics
    otelcol.receiver.otlp "otel" {
      grpc {
        endpoint = sys.env("POD_IP") + ":4317"
      }
      http {
        endpoint = sys.env("POD_IP") + ":4318"
      }

      output {
        logs    = [otelcol.processor.batch.otel.input]
        metrics = [otelcol.processor.batch.otel.input]
        traces  = [otelcol.processor.batch.otel.input]
      }
    }

    otelcol.processor.batch "otel" {
      output {
        logs    = [otelcol.exporter.loki.loki.input]
        metrics = [otelcol.exporter.prometheus.otel.input]
        traces  = [otelcol.exporter.otlp.tempo.input]
      }
    }

    otelcol.exporter.loki "loki" {
      forward_to = [loki.process.add_replay_label.receiver]
    }

    otelcol.exporter.prometheus "otel" {
        forward_to = [prometheus.remote_write.prometheus.receiver, prometheus.remote_write.mimir.receiver]
    }
